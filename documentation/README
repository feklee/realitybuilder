Introduction
============

This directory contains documentation for developers of Reality Builder.

Less well-known file extensions used:

* xar: Xara Xtreme (or compatible)

* 3dm: Rhino 3D


Getting started
===============

1. Upload the Reality Builder to the Google App Engine or start it on the
  development server included with the App Engine Python SDK.

2. Initialize sample data. For instuctions read the documentation at the top
  of:

    /documentation/sample_scene/init.py

3. Visit the user interface. It is the home page of the site to where you
  deployed.

4. Visit the admin interface, where you can change settings and manage state of
  blocks (path relative to user interface URL):

    /admin


Unit tests
==========

Run unit tests by visiting (relative to the root URL) with debug mode enabled:

  /source/javascript/realitybuilder/tests/runTests.html


How to enable support for Internet Explorer versions less than 9
================================================================

To make the Reality Builder work with Internet Explorer versions less than 9,
FlashCanvas Pro is required. For reasons of license, this library is not
included in the distribution of the Reality Builder. To install it:

1. Download FlashCanvas Pro 1.5 or compatible from: http://flashcanvas.net/

2. Place FlashCanvas Pro into:

  /proprietary/FlashCanvasPro

  The directory "proprietary" is for proprietary software components that
  should not be redistributed as part of the Reality Builder source code.


About blocks
============

Blocks must have the following shape:

  Right prism with a convex outline.

Blocks are solid, i.e. they never overlap.



About the camera
================

The camera x-y position must be outside of the x-y area where blocks are to be
built, and it must look down onto the blocks. All blocks, thus, are in front to
the sensor.

This limitation on camera placement allows for simpler and speedier code.


Terminology
===========

* Types of blocks:

  - New block: The block that may be positioned by the user.

  - Construction block: A block permanently in the construction.

    Types of construction blocks:

    . Real block: Block that is actually built.

    . Deleted block: Block that was deleted.

    . Pending block: Block that is not yet made real.

    The new, user positionable block is not part of the construction.

  - Shadow obscuring block: Block that is used for graphically removing parts
    of the new block's shadow that are not actually visible.

* Specifiers for coordinates (see also "perspective.xar"):

  - The coordinate specifiers ending in "B", e.g. "xB", denote positions in the
    grid where blocks may be placed. The space comprised by those coordinates
    is called "block position space", or short: "block space"

    Units: none (multiples of distances between positions)

    Value: integer

  - The coordinate specifiers ending in "BXY", denote block positions in the
    block space x-y plane.

  - The coordinate specifiers ending in "V" denote coordinates in "view space",
    i.e. the space relative to the lens, approximated as a pinhole, of the
    camera:

      +---x
      |\
      | \
      |  z
      y

    Units: mm

    The origin of the view space is in the pinhole.

  - The coordinate specifiers ending in "VXZ" denote coordinates in the view
    space x-z-plane. Points in this plane get mapped onto the horizontal line
    in the middle of the sensor: y = 0 Points are describe using x, z
    coordinate tuples.

    Units: mm

  - The coordinate specifiers ending in "S" denote coordinates in "sensor
    space", i.e. coordinates of projected points. The origin of the sensor is
    in one of its corners.

    Units: px

  - The coordinate specifiers ending in "VXZS" denote coordinates in the
    horizontal line in sensor space that the view space x-z-plane is mapped to.

    Units: px

  - All other coordinates are in world space.

    Units: mm

    To get from block space to world space, multiply block space coordinates by
    factors in mm. The multiplication factors for "xB" and "yB" are identical.
    Otherwise a block that is rotated in a plane would deform. The
    multiplication factor for "zB", however, is independent. Example:

    . Multiplication factor x, y: 5mm

    . Multiplication factor z: 3mm

* Point: Is specified as an array with two or three numbers: the coordinates.
  It is regarded as a vector, with its origin in the origin of the coordinate
  system.

* Edge: Connects two vertices. Is specified as an array with two indices to a
  vertex array, and a third index whose value is the original index/name of the
  edge. The third value is important to identify edges in case they are
  reordered.

* Line: straight line with infinite extends. Is specified as an array with two
  points that lie on it. If the points coincide, then the result of any
  function making use of the line is undefined.

* Line segment: similar to a line but with finite extends, connecting the
  points by which it is defined.

* Block: A block is described by an outline in the xy plane, in block space.
  Its height in block space is always: 1


Collision detection
===================

All configurations when two blocks collide can be configured freely. This is
done in block space.

At first it seems as if collision detection is better done in world space, and
automatically, without any configuration. However, when blocks touch each
other, then rounding errors can lead to unwanted results. Furthermore,
collision detection, as described above, in block space is probably simpler and
faster.


JSLint
======

Every Reality Builder JavaScript file contains configuration instructions at
the top for JSLint.


Releases
========

Before releasing a new version:

* Make sure that there no FIXME tagged comments in the code. Instead, if
  necessary, corresponding issues should be created in the issue tracker.

* Test with common browsers.

* Check that unit tests work.

* Disable debug mode.

* Check that the Reality Builder works fine with the sample data (/admin/init).



Versioning
==========

The version of a release is strucutred as follows:

  major.minor.bugfix

Example:

  2.1.4

Where:

* major (major release number): A major release is a release where the major
  release number has been increased. When that happens, then the minor release
  number and the bugfix release number are set to 0. The major release number
  is increased when - subjectively - there have been major changes as compared
  to the previous minor release.

* minor (minor release number): A minor release is a release where the minor
  release number has been increased. When that happens, then the bugfix release
  number is set to 0. The minor release number is increased when the changes as
  compared to the previous minor release are not major and not a bugfix.

* bugfix (bugfix release number): A bugfix release is a release where the
  bugfix release number has been increased. The bugfix release number is
  increased when a bug has been fixed in an already released version. In
  general, new features are only introduced with new minor or major releases,
  unless when absolutely necessary, and then these features are viewed as bugs.


Miscellaneous
=============

* In the datastore, blocks are allowed to occupy the same position, given that
  they have different rotation. This is enforced by giving the keys of the
  blocks the format: x, y, z, a. An example block outline that, when rotated
  about its center (by 180Â°) does not collide with the unrotated block:

    .
    |\
    | \
    +--+

* Canvas seems to have automatic "double buffering", i.e. Gecko and WebKit
  browsers don't draw to screen while executing code.

  According to a mailing list post by Robert O'Callahan <robert@ocallahan.org>:

    I assume you have a setTimeout handler (or similar) which renders a
    complete frame before returning. If so, then in Gecko and I think also in
    Webkit the canvas will not be drawn to the screen while your script is
    running, only between frames. So I suspect your performance problem has
    some other cause.

    Rob

  Source: <url:http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2009-Septemb
  er/022702.html>

* Centering of HTML content is done with the help of a table, since other
  solutions don't seem to work decently with older browsers such as IE6. The
  problem often is that when the window is too small, content is clipped from
  the top.

  When changing the implementation for centering, don't forget to check whether
  the content is still displayed correctly when the browser window is smaller
  than the content.

* It seems that it's better to not set the interval of image updates by the
  server too low, if the image source is slow. If it is not available, then
  this may lead to many requests being stuck, at least on the client.

* Image URLs at the same domain as the app don't seem to work.

* The server directory "/javascript" is in part based on a so called custom
  Dojo build. One reason for using a custom build are limitations on the number
  and size of files on Google App Engine, as of April 2010.
  
  How to create the build:

  1. Run the following command in the Dojo "buildscripts" directory, from the
    Windows XP command line:

    > SET SCOPE_MAP=[
    > SET SCOPE_MAP=%SCOPE_MAP%[\"dojo\",\"realitybuilderDojo\"],
    > SET SCOPE_MAP=%SCOPE_MAP%[\"dijit\",\"realitybuilderDijit\"],
    > SET SCOPE_MAP=%SCOPE_MAP%[\"dojox\",\"realitybuilderDojox\"]]
    > build.bat profile=realitybuilder action=release ^
      scopeDjConfig=\{locale:\"en\",parseOnLoad:true\} ^
      localeList=en loader=xdomain xdDojoScopeName=realitybuilderDojo ^
      optimize=shrinksafe scopeMap=%SCOPE_MAP%

    Note(s):

    * Specification of "scopeDjConfig" causes the global "djConfig" to be
      without effect, and therefore without conflict if existent.

    * The locale is "en" to keep things simple. Also then it seems that with
      "en" no Dojo NLS bundle gets loaded.

  2. Copy dojo and dojox related files and directories to "/javascript/dojo":

    - dojo/dojo.xd.js: The so called Dojo layer, also containing the Reality
      Builder code. The script file is cross domain compatible, i.e. it can be
      hosted on another domain than that of the page loading it.

    - dojo/_firebug: needed for Dojo debug mode

    - dojo/nls: needed for at least "dojox.date.posix.strftime"

    Source of the above resources, relative to the directory containing the
    Dojo SDK: release/dojo/

* Certain RPC calls require admin priveledges, namely those that are available
  only via the admin interface. This is necessary so that users cannot hack
  into the system and, for example, delete blocks.

* The maximum buildling height makes it possible to always have a place to
  position the new block, even when there is little space left in the
  construction.

* The date-time in the admin controls is shown in the time zone of the
  system/browser.

* States of blocks:

  - virtual: the new block which may be moved around has this state

  - pending: a block that has been requested to be build

  - real: a block that has been built

  - deleted: a block that has been removed or that is not planned to be build.

* To initialize the set of blocks to some example set, visit the following URL,
  relative to the root of the web site.

    /admin/update

* Polar coordinates are described by an array with two entries:

  0 - angle: Angle measured counter clockwise against the positive x axis. Its
    value is between -PI and PI.

    |   /
    |  /
    | /\
    |/  |angle
    +------

  1 - distance: Distance from the origin.

* After a block has been built in place of a request, the formerly used new
  block becomes a movable/virtual new block again. In other words: Through an
  entire session, there is only one new block object which changes state, from
  from virtual to pending to virtual and so on.

* In the database, there are never two blocks at the same block space position.


Legal
=====

Copyright 2011 Felix E. Klee <felix.klee@inka.de>

Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed
under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.

-- 
The following settings are interpreted by EMACS, do not remove them.
Local Variables:
mode:text
fill-column:79
coding: utf-8
End:
Local IspellDict: american
