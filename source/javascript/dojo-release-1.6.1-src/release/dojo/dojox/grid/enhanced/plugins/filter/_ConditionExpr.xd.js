/*
	Copyright (c) 2004-2011, The Dojo Foundation All Rights Reserved.
	Available via Academic Free License >= 2.1 OR the modified BSD license.
	see: http://dojotoolkit.org/license for details
*/


realitybuilderDojo._xdResourceLoaded(function(_1,_2,_3){return {depends:[["provide","dojox.grid.enhanced.plugins.filter._ConditionExpr"]],defineResource:function(_4,_5,_6){if(!_4._hasResource["dojox.grid.enhanced.plugins.filter._ConditionExpr"]){_4._hasResource["dojox.grid.enhanced.plugins.filter._ConditionExpr"]=true;_4.provide("dojox.grid.enhanced.plugins.filter._ConditionExpr");(function(){var _7=_6.grid.enhanced.plugins.filter;_4.declare("dojox.grid.enhanced.plugins.filter._ConditionExpr",null,{_name:"expr",applyRow:function(_8,_9){throw new Error("_ConditionExpr.applyRow: unimplemented interface");},toObject:function(){return {};},getName:function(){return this._name;}});_4.declare("dojox.grid.enhanced.plugins.filter._DataExpr",_7._ConditionExpr,{_name:"data",constructor:function(_a,_b,_c){this._convertArgs=_c||{};if(_4.isFunction(this._convertArgs.convert)){this._convertData=_4.hitch(this._convertArgs.scope,this._convertArgs.convert);}if(_b){this._colArg=_a;}else{this._value=this._convertData(_a,this._convertArgs);}},getValue:function(){return this._value;},applyRow:function(_d,_e){return typeof this._colArg=="undefined"?this:new (_4.getObject(this.declaredClass))(this._convertData(_e(_d,this._colArg),this._convertArgs));},_convertData:function(_f){return _f;},toObject:function(){return {op:this.getName(),data:this._colArg===undefined?this._value:this._colArg,isCol:this._colArg!==undefined};}});_4.declare("dojox.grid.enhanced.plugins.filter._OperatorExpr",_7._ConditionExpr,{_name:"operator",constructor:function(){if(_4.isArray(arguments[0])){this._operands=arguments[0];}else{this._operands=[];for(var i=0;i<arguments.length;++i){this._operands.push(arguments[i]);}}},toObject:function(){return {op:this.getName(),data:_4.map(this._operands,function(_10){return _10.toObject();})};}});_4.declare("dojox.grid.enhanced.plugins.filter._UniOpExpr",_7._OperatorExpr,{_name:"uniOperator",applyRow:function(_11,_12){if(!(this._operands[0] instanceof _7._ConditionExpr)){throw new Error("_UniOpExpr: operand is not expression.");}return this._calculate(this._operands[0],_11,_12);},_calculate:function(_13,_14,_15){throw new Error("_UniOpExpr._calculate: unimplemented interface");}});_4.declare("dojox.grid.enhanced.plugins.filter._BiOpExpr",_7._OperatorExpr,{_name:"biOperator",applyRow:function(_16,_17){if(!(this._operands[0] instanceof _7._ConditionExpr)){throw new Error("_BiOpExpr: left operand is not expression.");}else{if(!(this._operands[1] instanceof _7._ConditionExpr)){throw new Error("_BiOpExpr: right operand is not expression.");}}return this._calculate(this._operands[0],this._operands[1],_16,_17);},_calculate:function(_18,_19,_1a,_1b){throw new Error("_BiOpExpr._calculate: unimplemented interface");}});})();}}};});